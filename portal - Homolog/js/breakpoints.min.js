/* breakpoints.js v0.1-dev | @ajlkn | MIT licensed */

var breakpoints = (function() {
	"use strict";
  
	var _ = {
	  list: null,
	  media: {},
	  events: [],
  
	  init: function(list) {
		this.list = list;
		this.addEventListeners();
	  },
  
	  addEventListeners: function() {
		const events = ['resize', 'orientationchange', 'load', 'fullscreenchange'];
		events.forEach(event => window.addEventListener(event, this.poll.bind(this)));
	  },
  
	  active: function(query) {
		if (!(query in this.media)) {
		  this.media[query] = this.generateMediaQuery(query);
		}
		return this.media[query] !== false && window.matchMedia(this.media[query]).matches;
	  },
  
	  generateMediaQuery: function(query) {
		const [op, breakpoint] = this.parseQuery(query);
		if (!breakpoint || !(breakpoint in this.list)) return false;
  
		const a = this.list[breakpoint];
		const [x, y] = Array.isArray(a) ? a.map(Number) : [null, null];
		const units = this.extractUnits(a);
  
		return this.buildMediaQuery(op, x, y, units);
	  },
  
	  parseQuery: function(query) {
		const operators = {
		  '>=': ['gte', query.substr(2)],
		  '<=': ['lte', query.substr(2)],
		  '>': ['gt', query.substr(1)],
		  '<': ['lt', query.substr(1)],
		  '!': ['not', query.substr(1)],
		  '=': ['eq', query]
		};
		for (const [symbol, [op, bp]] of Object.entries(operators)) {
		  if (query.startsWith(symbol)) return [op, bp];
		}
		return ['eq', query]; // default
	  },
  
	  extractUnits: function(a) {
		const numStr = a[0] ? a[0].toString() : a[1].toString();
		return numStr.replace(/[0-9]/g, '');
	  },
  
	  buildMediaQuery: function(op, x, y, units) {
		if (isNaN(x) && isNaN(y)) return false;
  
		switch (op) {
		  case 'gte': return isNaN(x) ? 'screen' : `screen and (min-width: ${x}${units})`;
		  case 'lte': return isNaN(y) ? 'screen' : `screen and (max-width: ${y}${units})`;
		  case 'gt': return `screen and (min-width: ${y + 1}${units})`;
		  case 'lt': return `screen and (max-width: ${x - 1}${units})`;
		  case 'not': return `screen and (max-width: ${x - 1}${units}), screen and (min-width: ${y + 1}${units})`;
		  default: return `screen and (min-width: ${x}${units}) and (max-width: ${y}${units})`;
		}
	  },
  
	  on: function(query, handler) {
		this.events.push({ query, handler, state: false });
		if (this.active(query)) handler();
	  },
  
	  poll: function() {
		this.events.forEach(e => {
		  if (this.active(e.query)) {
			if (!e.state) {
			  e.state = true;
			  e.handler();
			}
		  } else {
			e.state = false;
		  }
		});
	  }
	};
  
	function __(list) { _.init(list); }
	__._ = _;
	__.on = _.on.bind(_);
	__.active = _.active.bind(_);
	return __;
  })();
  
  // UMD Wrapper
  (function(root, factory) {
	if (typeof define === 'function' && define.amd)
	  define([], factory);
	else if (typeof exports === 'object')
	  module.exports = factory();
	else
	  root.breakpoints = factory();
  }(this, function() { return breakpoints; }));