var browser = (function() {
    "use strict";

    var _ = {
        name: null,
        version: null,
        os: null,
        osVersion: null,
        touch: null,
        mobile: null,
        _canUse: null,

        canUse: function(property) {
            if (!_._canUse) _._canUse = document.createElement('div');
            return property in _._canUse.style || 
                   ['Moz', 'Webkit', 'O', 'ms'].some(prefix => prefix + property.charAt(0).toUpperCase() + property.slice(1) in _._canUse.style);
        },

        init: function() {
            const ua = navigator.userAgent;

            const browsers = [
                ['firefox', /Firefox\/([0-9\.]+)/],
                ['bb', /BlackBerry.+Version\/([0-9\.]+)/],
                ['bb', /BB[0-9]+.+Version\/([0-9\.]+)/],
                ['opera', /OPR\/([0-9\.]+)/],
                ['opera', /Opera\/([0-9\.]+)/],
                ['edge', /Edge\/([0-9\.]+)/],
                ['safari', /Version\/([0-9\.]+).+Safari/],
                ['chrome', /Chrome\/([0-9\.]+)/],
                ['ie', /MSIE ([0-9]+)/],
                ['ie', /Trident\/.+rv:([0-9]+)/]
            ];

            [_.name, _.version] = browsers.reduce(([name, version], [browserName, regex]) => {
                const match = ua.match(regex);
                return match ? [browserName, parseFloat(match[1])] : [name, version];
            }, ['other', 0]);

            const osList = [
                ['ios', /([0-9_]+) like Mac OS X/, v => v.replace(/_/g, '.')],
                ['ios', /CPU like Mac OS X/, () => 0],
                ['wp', /Windows Phone ([0-9\.]+)/],
                ['android', /Android ([0-9\.]+)/],
                ['mac', /Macintosh.+Mac OS X ([0-9_]+)/, v => v.replace(/_/g, '.')],
                ['windows', /Windows NT ([0-9\.]+)/],
                ['bb', /BlackBerry.+Version\/([0-9\.]+)/],
                ['bb', /BB[0-9]+.+Version\/([0-9\.]+)/]
            ];

            [_.os, _.osVersion] = osList.reduce(([os, osVersion], [osName, regex, transform]) => {
                const match = ua.match(regex);
                return match ? [osName, parseFloat(transform ? transform(match[1]) : match[1])] : [os, osVersion];
            }, ['other', 0]);

            _.touch = (_.os === 'wp' ? (navigator.msMaxTouchPoints > 0) : 'ontouchstart' in window);
            _.mobile = ['wp', 'android', 'ios', 'bb'].includes(_.os);
        }
    };

    _.init();
    return _;
})();

// UMD Wrapper
(function(root, factory) {
    if (typeof define === 'function' && define.amd) define([], factory);
    else if (typeof exports === 'object') module.exports = factory();
    else root.browser = factory();
}(this, function() { return browser; }));
